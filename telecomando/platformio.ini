
; PlatformIO template configuration file for megaTinyCore
; https://github.com/SpenceKonde/megaTinyCore/
;
;   Build options: build flags, source filter
;   Hardware options: oscillator type, BOD, EEPROM retain
;   Upload options: custom upload port, speed, and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options
; https://github.com/SpenceKonde/megaTinyCore/blob/master/PlatformIO.md
; https://docs.platformio.org/page/projectconf.html
; https://docs.platformio.org/en/latest/platforms/atmelmegaavr.html

[platformio]
; Default build target
default_envs = Upload_UPDI

; Parameters used for all environments
[env:ATtiny1617]
platform = atmelmegaavr
framework = arduino

; Chip in use
board = ATtiny1617


; Monitor port is auto detected. Override here
;monitor_port =
; Serial monitor baud rate
monitor_speed = 9600

; run the following command to set fuses
; pio run -t fuses -e set_fuses
[env:set_fuses]
; Upload protocol for used to set fuses
upload_protocol = ${env:Upload_UPDI.upload_protocol}
upload_flags =
; Hardware settings
board_hardware.bod = 2.7vs
board_hardware.eesave = yes
board_hardware.updipin = updi




 
#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x27,20,4);   0x27 default address for the I2C protocol, 4 rows and 20 columns display




; for radio 
; ask_reliable_datagram_client.pde  
; -*- mode: C++ -*-
; Example sketch showing how to create a simple addressed, reliable messaging client
; with the RHReliableDatagram class, using the RH_ASK driver to control a ASK radio.
; It is designed to work with the other example ask_reliable_datagram_server
; Tested on Arduino Mega, Duemilanova, Uno, Due, Teensy, ESP-12
 
#include <RHReliableDatagram.h>
#include <RH_ASK.h>
#include <SPI.h>
 
#define CLIENT_ADDRESS 1
#define SERVER_ADDRESS 2
 
; Singleton instance of the radio driver
;/ RH_ASK driver;
; RH_ASK driver(2000, 4, 5, 0); ; ESP8266 or ESP32: do not use pin 11 or 2
; RH_ASK driver(2000, PD14, PD13, 0); STM32F4 Discovery: see tx and rx on Orange and Red LEDS
;/ With AtTiny x17 (such as 3217 etc) using Spencer Kondes megaTinyCore, You can initialise like this:
RH_ASK driver(2000, 6, 7, 0);
;/ which will transmit on digital pin 7 == PB4 == physical pin 12 on Attiny x17
;/ and receive on  digital pin 6 == PB5 == physical pin 11 on Attiny x17
;/ Uses Timer B1.

; Class to manage message delivery and receipt, using the driver declared above
RHReliableDatagram manager(driver, CLIENT_ADDRESS);


;;;;;; define variables 
float speed_seed = 0.0;
float meter_seed = 0.0;
bool seed_ON = false;

int go = LOW;
int speed_up = LOW;
int speed_down = LOW;
int distance_up = LOW;
int distance_down = LOW;

int controller_lv_battery;
int machine_lv_battery; 
int joy_x;

;;;;;; define pin
#define pin_joystick_X 1        // pin x axis joystick

#define pin_joystick_button 1   // pin button joystick
#define pin_v1 8                // Button speed +
#define pin_v2 8                // Button spedd -
#define pin_d1 8                // Button distance +
#define pin_d2 8                // Button distance -
#define pin_s1 8                // Button seed on
#define pin_s2 8                // Button seed off
#define pin_a1 8                // Button check go forward

#define pin_buzzer 8            // pin buzzer
#define pin_l1 8                // pin led semina ON



void setup() 
{
  // Activate the internal pull-up resistors
  pinMode(pin_joystick_button, INPUT_PULLUP);   
  pinMode(pin_v1, INPUT_PULLUP);
  pinMode(pin_v2, INPUT_PULLUP);
  pinMode(pin_d1, INPUT_PULLUP);
  pinMode(pin_d2, INPUT_PULLUP);
  pinMode(pin_s1, INPUT_PULLUP);
  pinMode(pin_s2, INPUT_PULLUP);
  pinMode(pin_a1, INPUT_PULLUP);

  pinMode(pin_buzzer, OUTPUT);
  pinMode(pin_l1, OUTPUT);

  Serial.begin(9600);
  if (!manager.init())
    Serial.println("init failed");

  TinyWireM.begin(); // initialize I2C lib
  lcd.init();        //init for lcd
  lcd.backlight();
  lcd.clear ();             
}
 



uint8_t data[] = "Hello World!";
// Dont put this on the stack:
uint8_t buf[RH_ASK_MAX_MESSAGE_LEN];
 



void loop()
{

  check_battery(&controller_lv_battery ,&machine_lv_battery);

  if(speed_seed == 0 || meter_seed == 0){        //first data input
    change_menu(&speed_seed, &meter_seed);
  }  

  refresh_lcd(&speed_seed, &meter_seed, &controller_lv_battery, &machine_lv_battery);


//control button

  speed_up = digitalRead(pin_v1);
  if(speed_up == HIGH){
   speed_seed = speed_seed + 0.5;
   speed_up = LOW;
   change_menu(&speed_seed, &meter_seed);
}

    speed_down = digitalRead(pin_v2);

    if(speed_down == HIGH){
      speed_seed = speed_seed - 0.5;
      speed_down = LOW;
      change_menu(&speed_seed, &meter_seed);
    }

    distance_up = digitalRead(pin_d1);
    
    if(distance_up == HIGH){
      meter_seed = meter_seed + 0.1;
      distance_up = LOW;
      change_menu(&speed_seed, &meter_seed);
    }

    distance_down = digitalRead(pin_d2);
    
    if(distance_down == HIGH){
      meter_seed = meter_seed - 0.1;
      distance_down = LOW;
      change_menu(&speed_seed, &meter_seed);
    }




= analogRead(JOYSTICK_X)





















  Serial.println("Sending to ask_reliable_datagram_server");
    
  // Send a message to manager_server
  if (manager.sendtoWait(data, sizeof(data), SERVER_ADDRESS))
  {
    // Now wait for a reply from the server
    uint8_t len = sizeof(buf);
    uint8_t from;   
    if (manager.recvfromAckTimeout(buf, &len, 2000, &from))
    {
      Serial.print("got reply from : 0x");
      Serial.print(from, HEX);
      Serial.print(": ");
      Serial.println((char*)buf);
    }
    else
    {
      Serial.println("No reply, is ask_reliable_datagram_server running?");
    }
  }
  else
    Serial.println("sendtoWait failed");
  delay(500);
}
 


void refresh_lcd(float* speed_seed, float*  meter_seed, int* controller_lv_battery, int* machine_lv_battery){

  lcd.clear();

  lcd.setCursor(0, 0);
  lcd.print("SPEED'");
  lcd.setCursor(0, 11);
  lcd.print(speed_seed);
  lcd.setCursor(0, 15);
  lcd.print("m/min");

  lcd.setCursor(1, 0);
  lcd.print("DIST. SEED");
  lcd.setCursor(1, 14);
  lcd.print(meter_seed);
  lcd.setCursor(1, 17);
  lcd.print("m");

  lcd.setCursor(2, 0);
  lcd.print("BATT. JOYSTICK");
  lcd.setCursor(2, 17);
  lcd.print(controller_lv_battery);
  lcd.setCursor(2, 20);
  lcd.print("%");

  lcd.setCursor(2, 0);
  lcd.print("BATT. MECHAPOT");
  lcd.setCursor(2, 17);
  lcd.print(machine_lv_battery);
  lcd.setCursor(2, 20);
  lcd.print("%");

}



void change_menu(float* speed_seed, float*  meter_seed){

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("SET SPEED AND/OR");
  lcd.setCursor(1, 1);
  lcd.print("DISTANCE SEED");

  if(seed_ON == true){             //stop seed during setting
   go = false;            
  }

  while((go == HIGH) & (speed_seed != 0) & (meter_seed != 0))){   //loop until set speed and meter seed
    
    if((speed_seed != 0) & (meter_seed != 0)){
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("PRESS OK");
      lcd.setCursor(1, 1);
      lcd.print("FOR CONFIRM VALUE");
    }

    lcd.setCursor(2, 0);
    lcd.print("SPEED=");
    lcd.setCursor(2, 11);
    lcd.print(speed_seed);
    lcd.setCursor(2, 15);
    lcd.print("m/min");

    lcd.setCursor(3, 0);
    lcd.print("DIST. SEED");
    lcd.setCursor(3, 14);
    lcd.print(meter_seed);
    lcd.setCursor(3, 17);
    lcd.print("m");

    speed_up = digitalRead(pin_v1);

    if(speed_up == HIGH){
      speed_seed = speed_seed + 0.5;
      speed_up = LOW;
    }

    speed_down = digitalRead(pin_v2);

    if(speed_down == HIGH){
      speed_seed = speed_seed - 0.5;
      speed_down = LOW;
    }

    distance_up = digitalRead(pin_d1);
    
    if(distance_up == HIGH){
      meter_seed = meter_seed + 0.1;
      distance_up = LOW;
    }

    distance_down = digitalRead(pin_d2);
    
    if(distance_down == HIGH){
      meter_seed = meter_seed - 0.1;
      distance_down = LOW;
    }

    go = digitalRead(pin_a1);
  }

}


void check_battery(int* controller_lv_battery ,int* machine_lv_battery){

}


